ext.versionFile = file('version.properties')
version = loadVersion()
println("Version " + version);

// Apply the java plugin to add support for Java
apply plugin: 'groovy'
apply plugin: 'application'

mainClassName = 'org.sil.hunspellxml.HunspellXMLCLI'


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //implementation 'com.google.guava:guava:23.0'
    
    compile 'org.codehaus.groovy:groovy-all:2.4.12'
    compile 'dk.dren:hunspell:1.3.2' //Hunspell JNA
    compile 'com.thaiopensource:jing:20091111' //Relax NG validator
    compile 'org.elasticsearch:jna:4.5.1' //JNA

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}


jar {
	manifest {
		attributes 'Main-Class': 'org.sil.hunspellxml.HunspellXMLCLI'
	}
}


def loadVersion()
{
  Properties props = new Properties()
  File propsFile = versionFile
  props.load(propsFile.newDataInputStream())
  project.version = props.getProperty('versionMajor') + "." +
  			props.getProperty('versionMinor') + "." +
  			props.getProperty('versionPatch') + "." +
  			props.getProperty('versionBuild')
}

def incrementVersion(level){
	level = level.substring(0,1).toUpperCase() + level.substring(1);
	String versionLevel = 'version' + level
	Properties props = new Properties()
	File propsFile = versionFile
	props.load(propsFile.newDataInputStream())
	Integer nextversion = ( ((props.getProperty(versionLevel)) as BigDecimal) + 1 )
	props.setProperty(versionLevel, nextversion.toString())
	props.store(propsFile.newWriter(), null)
	props.load(propsFile.newDataInputStream())
}

def resetVersion(level){
	level = level.substring(0,1).toUpperCase() + level.substring(1);
	String versionLevel = 'version' + level
	Properties props = new Properties()
	File propsFile = versionFile
	props.load(propsFile.newDataInputStream())
	props.setProperty(versionLevel, 0)
	props.store(propsFile.newWriter(), null)
	props.load(propsFile.newDataInputStream())
}

task incrementVersionMajor << {
	incrementVersion('major')
	resetVersion('minor')
	resetVersion('patch')
}

task incrementVersionMinor << {
	incrementVersion('minor')
	resetVersion('patch')
}

task incrementVersionPatch << {
	incrementVersion('patch')
}

task incrementVersionBuild << {
	incrementVersion('build')
}

build << {println(version)}
build << {incrementVersion('build')}